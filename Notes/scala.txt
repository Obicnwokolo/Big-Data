export SPARK_HOME=//opt/cloudera/parcels/CDH/lib/spark
export PATH=$SPARK_HOME/bin:$PATH
-----------------------------------------------------------------------

SCALA
-Fuctional programming language
- Based on interactive shell called REPL (Read Eval Print Loop): REPL lets one write expressions and responds with their value

EVALUATION process
    1. Take the leftost operator
    2. Evaluate its operands (left before right)
    3. Apply the operator to the operands

# A name is evaluated by replacing it with the right hand side of its definition.
# The evaluation process stops once its resuts in a value.
# A value is a numer.

    Primitive Data types
Int: 32-bit integers
Long: 64-bit integers
Float: 32-bit floating point numbers
Double: 64-bit floating point numbers
Char: 16-bit unicode characters
Short: 16-bit integers >> max short = 32767
Byte: 8-bit integers >> max Byte = 127
Boolean: boolean values >> true and false

# Val are not reasignable
# var are reassignable
# var are rarely used# types on val and var are implied
# types can always be explicitly defined in declarations
----------------------------------------------------------------------------------
LAZY VAL
# it is just like a val
# will not be evaluated until it is referenced
# any subsequent calls to the val will return the same value when initially called upon.
# There is no such thing as lazy var
# lazy val can be forgiving if an exception happens

scala> lazy val a ={println("Hello"); 5}
-----------------------------------------------------------------------------------
BENDING VAL AND VAR TO OUR WILL
# val and var can have spaces if surrounded by (`)
# they may be referenced without a backtick (`) if they are not reserved.

scala> val `My greatest gift in dollars` = 500
--------------------------------------------------------------------------------------------------------
IF, ELSE IF, ELSE
scala> val a = 10
scala> var result = ""
scala> if(a<10) {result = "less than 10"} 
        else if (a>10) {result = "greater than 10"} 
        else {result = "it is 10!"}
println(result)
or
scala> val a = 10
scala> val result = if (a<10) "Less than 10"
                    else if (a>10) "Greater than 10"
                    else "It is 10!"
println(result)

# if statements exist like other languages
# if statements can be used in an imperative fashion
# if statements can be used in a functional fashion and assigned to a value or vairalbel.
-----------------------------------------------------------------------------------------------------
WHILE, DO WHILE

WHILE LOOP

object JarObject {
  def main(args: Array[String]): Unit = {
    var a = 100
    var result = ""
    while (a > 0) {
      result = result + a
      if (a > 1) result = result + ","
      a = a -1
    }

    println(result) }
}

100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1

val result = (1 to 100).reverse.mkString(",")
println(result)

val result = (1 to 100 by -1).mkString(",")
println(result)

println((1 to 100 by -1).mkString(","))

#prints same result

DO WHILE LOOP
var a = 100
var result = ""
do {
    result = result + a
    if (a > 1) result = result + ","
    a = a -1
}  while (a > 0)

println(result) 

# While/do-while statements exists in scala like other languages, 
# While/do-while are rarely used.
# While/do-while may cause the programmer to use variables.
# There usually is a functional equivalent to using While/do-while

FOR LOOPS
var a = 100
var result = ""
for (a < -1 to 100) {
    result = result + a
    if (a > 1) result = result + ","
}
println(result)

FOR LOOPS
val xs = List(1,2,3,4)
var result =List[Int]()
for (a <- xs) {
    result = result:+ (a+1) 
}
 println(result)
 oUTPUT: List(2, 3, 4, 5)

 or

 val xs = List(1,2,3,4)
 val result = for (a < -xs) yield (a + 1)
 println(result)

 # prints same result

 # Traditional for loops are available in scala
 # Traditional for loops are underused in scala
 # For comprehensions are used in place of for Loops